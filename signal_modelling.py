import numpy as np
import matplotlib.pyplot as plt

import math
import sys, os
import xml.etree.ElementTree as ET
import subprocess

from Forward_models import *
   
def forward_model():

   # print log messages
   log_print = True
   # insertion_loss
   conn_loss = 4 					# loss in pct
   # laser
   laser_power = 10				# in dBm
   laser_wavelength = 1550.0		# in nm
   # EVOA
   use_EVOA = False
   EVOA_loss = 1.5 					# in dB
   # Fixed attenuators 
   number_of_attenuators = 5
   attenuator_strengths = [15, 15, 10, 20,3]		# in dB
   # Detector
   detector_name = "thorlabs"		# femto or thorlabs 
   detector_gain = 50				# in dB
   detector_conversion_WtoA = 0.836			#0.836
   # Voltage amplification
   voltage_amp = 10
   # Readout
   readout_noise = 0				# in RMS V
   readout_offset = -0.017 			# in V
   


   # signal generated by laser
   sig, unit = get_laser_sig(lambda_set=laser_wavelength, power=laser_power)
   if log_print: print_line(sig, unit, text='laser signal strength')

   # signal loss at output of laser
   sig, unit = fibre_connector_loss(sig,unit,loss=conn_loss)
   if log_print: print_line(sig, unit, text='signal at input fibre; connector loss')

   if use_EVOA:
      # signal loss at input of EVOA
      sig, unit = fibre_connector_loss(sig,unit,loss=conn_loss)
      if log_print: print_line(sig, unit, text='signal at input EVOA; connector loss' )

      # signal loss inside EVOA
      sig, unit = get_EVOA_loss(sig,unit,loss=EVOA_loss)  # loss in dB; 1.5 dB is minimum loss according to spec 
      if log_print: print_line(sig, unit, text='signal after internal attenuation at EVOA' )

      # signal loss at output of EVOA
      sig, unit = fibre_connector_loss(sig,unit,loss=conn_loss)
      if log_print: print_line(sig, unit, text='signal after connector loss output EVOA; connector loss' )

   if (number_of_attenuators > 0):
      # signal loss at input of fixed attenuator
      sig, unit = fibre_connector_loss(sig,unit,loss=conn_loss)
      if log_print: print_line(sig, unit, text='signal after fixed attenutator; connector loss' )

      for i_att in range(number_of_attenuators):
   
         # signal loss at fixed attenuator
         sig, unit = attenuator_loss(sig,unit,loss=attenuator_strengths[i_att])
         if log_print: print_line(sig, unit, text='signal after fixed gain: '+str(attenuator_strengths[i_att])+'dB' )

         # signal loss at output of fixed attenuator
         sig, unit = fibre_connector_loss(sig,unit,loss=conn_loss)
         if log_print: print_line(sig, unit, text='signal after fixed attenutator; connector loss' )


   # signal loss at input of detector
   sig, unit = fibre_connector_loss(sig,unit,loss=conn_loss)
   if log_print: print_line(sig, unit, text='signal at input detector; connector loss' )

   # photon signal converted into current
   sig, unit = detector_conversion_signal(sig,unit, conv_rate=detector_conversion_WtoA)
   if log_print: print_line(sig, unit, text='signal after conversion at detector' )

   # detector current converted into voltage
   sig, unit = multiply_by_detector_gain(sig,unit, gain=detector_gain)  # detector gain in dB
   if log_print: print_line(sig, unit, text='signal at detector output' )

   # voltage amplification
   sig, unit = voltage_amplification(sig,unit, amp=voltage_amp)  # linear amplification factor
   if log_print: print_line(sig, unit, text='signal after voltage amplification' )

   # add dark current   
   sig, unit = add_dark_currrent(sig,unit, gain=detector_gain, amp=voltage_amp)  # detector gain in dB
   if log_print: print_line(sig, unit, text='signal after addding dark current' )

   # add readout offset  
   #sig, unit = add_offset(sig,unit, offset=readout_offset)  # fixed offset at TiePie
   #if log_print: print_line(sig, unit, text='signal after adding offset at TiePie' )


forward_model()
